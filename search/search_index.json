{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udd0e Overview","text":"<p>APIRequest (APIR) is a plugin for the note taking app Obsidian that allows you to make requests to apis display the response in your notes.</p>"},{"location":"#features","title":"\ud83d\udd25 Features","text":"<ul> <li>Perform requests using various methods such as <code>GET</code>, <code>POST</code>, <code>PUT</code>, and <code>DELETE</code>.</li> <li>Use variables from the <code>front-matter</code>, global variables or even reuse responses from another codeblocks.</li> <li>Save responses in the <code>localStorage</code> for convenient access and reuse.</li> <li>Disable code blocks as needed to optimize performance.</li> <li>Extract and display specific values from responses, giving you fine-grained control over how data is presented.</li> </ul>"},{"location":"#how-to-use","title":"\u26a1 How to use","text":"<p>To make a request, create a code-block with the language set to <code>req</code>. Inside the code-block, you can define parameters such as <code>url</code>, <code>method</code>, <code>body</code>, <code>headers</code>, etc. See the available flags for a complete reference.</p> <pre><code>```req\nurl: https://my-json-server.typicode.com/typicode/demo/comments\nmethod: post\nbody: {\"id\":1}\nheaders: {\"Accept\": \"application/json\"}\nshow: $.id\nreq-uuid: IDpersona\ndisabled\n```\n</code></pre>"},{"location":"#use-cases","title":"\ud83e\udde9 Use Cases","text":"<p>Check out the Use Cases section for examples of how you can use APIRequest in your workflows.</p>"},{"location":"en/","title":"\ud83d\udd0e Overview","text":"<p>APIRequest (APIR) is a plugin for the note taking app Obsidian that allows you to make requests to apis display the response in your notes.</p>"},{"location":"en/#features","title":"\ud83d\udd25 Features","text":"<ul> <li>Perform requests using various methods such as <code>GET</code>, <code>POST</code>, <code>PUT</code>, and <code>DELETE</code>.</li> <li>Utilize variables from the <code>front-matter</code>, global variables or even reuse responses from another codeblocks.</li> <li>Save responses in the <code>localStorage</code> for convenient access and reuse.</li> <li>Disable code blocks as needed to optimize performance.</li> <li>Display specific values from responses, providing granular control over the presentation of data.</li> </ul>"},{"location":"en/#how-to-use","title":"\u26a1 How to use","text":""},{"location":"en/#code-block","title":"\ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb Code-block","text":"<p>To use it, create a code-block with the language set to <code>req</code>. Inside the code-block, you can specify <code>url</code>, <code>method</code>, <code>body</code>, <code>headers</code>, etc. See the available flags for more information.</p> <pre><code>```req\nurl: https://my-json-server.typicode.com/typicode/demo/comments\nmethod: post\nbody: {\"id\":1}\nheaders: {\"Accept\": \"application/json\"}\nshow: $.id\nreq-uuid: IDpersona\ndisabled\n```\n</code></pre>"},{"location":"en/codeblocks/","title":"\ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb Codeblocks","text":"<p>The <code>codeblock</code> is a versatile block that can be used to write code in different languages. In this case, we will use it to make API requests.</p>"},{"location":"en/codeblocks/#flags","title":"\ud83c\udff3\ufe0f Flags","text":"<p>Flags are the way to specify the parameters of our request.</p> Flag Default url method GET body headers show ALL req-uuid req-general hidden FALSE disabled save-as auto-update FALSE format properties"},{"location":"en/codeblocks/#localstorage-variables","title":"LocalStorage &amp; Variables","text":"<p>API responses can be stored in <code>localStorage</code> and reused in other codeblocks or notes. To store a response, you must assign it a unique identifier using the <code>req-uuid</code> flag.</p> <p>You can access stored responses using the following syntax:</p> <pre><code>{{ls.UUID&gt;JSONPath}}\n</code></pre> <ul> <li><code>UUID</code>: The unique identifier defined in the <code>req-uuid</code> flag.</li> <li><code>JSONPath</code>: The path to the specific data you want from the response.</li> </ul> <p>Example: If you have a request with <code>req-uuid: user</code>, you can access the user\u2019s name like this:</p> <pre><code>{{ls.user&gt;$.name}}\n</code></pre> <p>You can also reference variables defined in the note's frontmatter using:</p> <pre><code>{{this.variableName}}\n</code></pre> <p>For global variables, you can define them in the plugin settings. These are saved in <code>localStorage</code> and can be accessed with:</p> <pre><code>{{ls.variableName}}\n</code></pre>"},{"location":"en/codeblocks/#url","title":"url","text":"<p>Is the only required flag. It specifies the endpoint of the request.</p> <pre><code>```req \n# this is just a comment\nurl: https://jsonplaceholder.typicode.com/users/{{this.id}}\n```\n</code></pre> <p>Where <code>{{this.id}}</code> is a variable (<code>id</code>) defined in the frontmatter.</p>"},{"location":"en/codeblocks/#method","title":"method","text":"<p>Specifies the request method. The default value is <code>GET</code> and the available methods are:</p> <ul> <li>GET</li> <li>POST</li> <li>PUT</li> <li>DELETE</li> </ul> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/posts\nmethod: post\n```\n</code></pre>"},{"location":"en/codeblocks/#body","title":"body","text":"<p>Specifies the body of the request. The default value is an empty object. The data should be in JSON format, separating key and value with a colon plus space (<code>,</code>).</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/posts\nmethod: post\nbody: {\"title\": {{this.filename}}, \"body\": \"bar\", \"userId\": 1}\n```\n</code></pre> <p>Where <code>{{this.filename}}</code> is the name of the working file.</p>"},{"location":"en/codeblocks/#headers","title":"headers","text":"<p>Specifies the headers of the request. The default value is an empty object. The data should be in JSON format, separating key and value with a colon plus space (<code>,</code>).</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/posts\nmethod: post\nheaders: {\"Content-type\": \"application/json; charset=UTF-8\"}\n```\n</code></pre> <p>You can use responses from other requests as headers/body/url/show. For example, if you have a request with <code>req-uuid: token</code>, you can use it like this:</p> <pre><code>```req\nurl: https://api.todoist.com/rest/v2/tasks\nheaders: {\"Authorization\": \"Bearer {{ls.token&gt;$.access_token}}\"}\nshow: $..content\nformat: - [ ] {}\nreq-id: todos\n```\n</code></pre>"},{"location":"en/codeblocks/#show","title":"show","text":"<p>Specifies the response data to display. See JSONPath examples, or try the online tool by jsonpath-plus.</p> <pre><code>```req\nurl: https://api.chess.com/pub/player/hikaru/stats\nshow: $['chess_daily']['last']['rating']\n```\n</code></pre> <p>Multiple outputs can be displayed by using <code>[]</code>.</p> <pre><code>```req\nurl: https://api.chess.com/pub/player/hikaru/stats\nshow: $.chess_daily[last,best].rating\n```\n</code></pre> <p>Or you can also use <code>+</code> to get multiple outputs.</p> <pre><code>```req\nurl: https://api.chess.com/pub/player/hikaru/stats\nshow: $.chess_daily[last,best].rating + $.chess960_daily[last,best].rating\n```\n</code></pre> <p>Looping over an array is also possible. The following example retrieves the city from all users.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users\nshow: $..address.city\n```\n</code></pre> <p>Looping over a specified number of elements of the array is also possible.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users\nshow: $..[:3].address.city\n```\n</code></pre> <p>It's also possible to loop over a specified range of indexes of the array.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users\nshow: $..[3,2,6].address.city\n```\n</code></pre> <p>You can access the last element using <code>(@.length-1)</code> or just <code>[-1:]</code>.</p> <pre><code>```req\nurl: https://api.modrinth.com/v2/project/distanthorizons\nshow: $.game_versions[(@.length-1)]\n```\n</code></pre> <p>To access multiple elements at the same time.</p> <pre><code>```req \nurl: http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&amp;user=rooyca&amp;api_key=API_KEY&amp;format=json&amp;limit=4\nshow: $..recenttracks.track[0:][streamable,name,artist]\n```\n</code></pre>"},{"location":"en/codeblocks/#req-uuid","title":"req-uuid","text":"<p>Specifies the unique identifier of the request. This is useful when we want to store the response in <code>localStorage</code> and use it in other blocks or notes.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users/1\nshow: $.name\nreq-uuid: test-{{this.username}}\n```\n</code></pre> <p>Where <code>{{this.username}}</code> is a variable (<code>username</code>) defined in the frontmatter.</p> <p>Stored responses can be accessed using the <code>req-uuid</code> (which won't trigger a new request).</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users/1\nreq-uuid: name\n```\n</code></pre> <p>Responses can also be accessed using dataview.</p> <pre><code>```dataviewjs\ndv.paragraph(localStorage.getItem(\"req-UUID\"))\n```\n</code></pre> <p>Is mandatory to use <code>req-</code> before whatever you defined in <code>req-uuid</code> flag.</p> <p>To remove responses from localStorage, run:</p> <pre><code>```dataviewjs\nlocalStorage.removeItem(\"req-name\")\n```\n</code></pre> <p>To remove responses, go to settings and click over the response you want to delete.</p>"},{"location":"en/codeblocks/#hidden","title":"hidden","text":"<p>Executes the code block without displaying its output.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users/1\nreq-uuid: name\nhidden\n```\n</code></pre>"},{"location":"en/codeblocks/#disabled","title":"disabled","text":"<p>Disables the request. The codeblock won't be executed.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users/1\nshow: $.name\nreq-uuid: name\ndisabled\n```\n</code></pre>"},{"location":"en/codeblocks/#save-as","title":"save-as","text":"<p>Specifies the path to save the response. It'll save the entire response. A file extension is required. It won't create directories.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/posts/1\nsave-as: posts/1.json\n```\n</code></pre>"},{"location":"en/codeblocks/#auto-update","title":"auto-update","text":"<p>If present, the codeblock will automatically update the response every time is possible. This is only needed when using the flag <code>req-uuid</code>, because the default behavior of the codeblock is to run every time the note is loaded.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/posts/1\nreq-uuid: firstPost\nauto-update\nsave-as: posts/1.json\n```\n</code></pre>"},{"location":"en/codeblocks/#format","title":"format","text":"<p>Specifies the format in which the response should be displayed. It can be any string (including <code>html</code>). If more than one output is specified, more then one format should be specified, otherwise it'd just render the first output.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/posts/1\nshow: $.[title,body]\nformat: &lt;h1&gt;{}&lt;/h1&gt; &lt;p&gt;{}&lt;/p&gt;\n```\n</code></pre> <p>In this example, first <code>{}</code> will be replaced with the title, and second <code>{}</code> will be replaced with the body.</p>"},{"location":"en/codeblocks/#properties","title":"properties","text":"<p>To use this flag you need a JSON response and the <code>show</code> flag</p> <p>Specifies the frontmatter properties to update with the response. The data should be strings separated by commas. To set internal links use the this <code>[[..]]</code> syntax.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/posts/1\nshow: $.[id,title]\nproperties: id, title\n```\n</code></pre>"},{"location":"en/usecase/","title":"Usecases","text":"<p>A collection of use cases for this plugin. If you have a one, please share it with us.</p>"},{"location":"en/usecase/#using-inline-responses-with-dataview","title":"Using inline responses with Dataview","text":"<p>First, make a request and store the response using <code>req-uuid</code>:</p> <pre><code>```req\nurl: https://jsonplaceholder.typicode.com/comments/1\nreq-uuid: test\nhidden\n```\n</code></pre> <p>Next, with DataviewJS and inline JavaScript queries enabled, you can access the saved data like this:</p> <pre><code>The email is `$=dv.el(\"span\", JSON.parse(localStorage.getItem(\"req-test\")).email)`  \nand the ID is `$=dv.el(\"span\", JSON.parse(localStorage.getItem(\"req-test\")).id, { cls: \"mod-warning\" })`\n</code></pre> <p>This retrieves the email and ID from the saved response (the <code>req-</code> prefix is always required). Here, we\u2019re also adding a custom class to the second inline query.</p> <p>Rendered output will look like this:</p> <p>The email is Eliseo@gardner.biz and the ID is 1 </p>"},{"location":"en/usecase/#check-bitcoin-or-any-crypto-price","title":"Check BITCOIN (or any crypto) price","text":"<pre><code>```req \nurl: https://api.coincap.io/v2/rates/bitcoin\nshow: $.data.rateUsd\n```\n</code></pre> <p>64992.8972508856324769</p>"},{"location":"en/usecase/#get-the-weather","title":"Get the weather","text":"<pre><code>```req\nurl: https://api.openweathermap.org/data/2.5/weather?q=&lt;CITY&gt;&amp;appid=YOUR_API_KEY\nshow: $.main.temp\n```\n</code></pre>"},{"location":"en/usecase/#search-movies","title":"Search movies","text":"<pre><code>```req\nurl: https://api.themoviedb.org/3/search/movie?query={{this.title}}&amp;api_key=YOUR_API_KEY\nshow: $.results[0:].title\n```\n</code></pre> <p>Note the use of <code>{{this.title}}</code>. This is a feature that allows you to pass front-matter properties.</p>"},{"location":"en/usecase/#render-data","title":"Render data","text":"<pre><code>```req\nurl: https://mapi.mobilelegends.com/hero/detail?id=1\nshow: $.data[cover_picture,name,type]\nformat: ![img]({}) &lt;br&gt; &lt;strong&gt;Name:&lt;/strong&gt; {} &lt;br&gt; &lt;strong&gt;Type:&lt;/strong&gt; {}\n```\n</code></pre>"},{"location":"en/usecase/#get-todos-from-todoist","title":"Get TODOS from todoist","text":"<pre><code>```req\nurl: https://api.todoist.com/rest/v2/tasks\nheaders: {\"Authorization\": \"Bearer YOUR_TOKEN\"}\nshow: $..content\nformat: - [ ] {}\nreq-id: todos\n```\n</code></pre> <p>This will save the response in localStorage under the key <code>req-todos</code></p>"},{"location":"en/usecase/#your-use-case","title":"Your use case","text":"<p>If you want to share your use case, please feel free to open a PR or a Issue.</p>"},{"location":"es/","title":"\ud83d\udd0e APIRequest","text":"<p>APIRequest (APIR) es un plugin para Obsidian que te permite realizar solicitudes HTTP y mostrar la respuesta en tus notas.</p>"},{"location":"es/#caracteristicas","title":"\ud83d\udd25 Caracter\u00edsticas","text":"<ul> <li>Realiza solicitudes HTTP utilizando varios m\u00e9todos como <code>GET</code>, <code>POST</code>, <code>PUT</code> y <code>DELETE</code>.</li> <li>Utiliza variables del front-matter dentro de bloques de c\u00f3digo.</li> <li>Guarda respuestas en <code>localStorage</code> para un acceso y reutilizaci\u00f3n convenientes.</li> <li>Desactiva bloques de c\u00f3digo seg\u00fan sea necesario para optimizar el rendimiento.</li> <li>Muestra valores espec\u00edficos de las respuestas, proporcionando un control detallado sobre la presentaci\u00f3n de datos.</li> </ul>"},{"location":"es/#como-usar","title":"\u26a1 C\u00f3mo usar","text":""},{"location":"es/#bloque-de-codigo","title":"\ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb Bloque de c\u00f3digo","text":"<p>Para usarlo, crea un bloque de c\u00f3digo con el lenguaje establecido en <code>req</code>. Dentro del bloque de c\u00f3digo, puedes especificar <code>url</code>, <code>method</code>, <code>body</code>, <code>headers</code>, etc. Consulta las banderas disponibles para m\u00e1s informaci\u00f3n.</p> <pre><code>```req\nurl: https://my-json-server.typicode.com/typicode/demo/comments\nmethod: post\nbody: {\"id\":1}\nheaders: {\"Accept\": \"application/json\"}\nshow: $.id\nreq-uuid: id-persona\ndisabled\n```\n</code></pre>"},{"location":"es/codeblocks/","title":"\ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb Bloque de c\u00f3digo","text":"<p>El <code>bloque de c\u00f3digo</code> es un bloque vers\u00e1til que se puede usar para escribir c\u00f3digo en diferentes lenguajes. En este caso, lo usaremos para realizar solicitudes.</p>"},{"location":"es/codeblocks/#banderas","title":"\ud83c\udff3\ufe0f Banderas","text":"<p>Las banderas son la forma de especificar los par\u00e1metros de nuestra solicitud y tambi\u00e9n el formato en el que queremos nuestra respuesta.</p> Bandera Valor predeterminado url method GET body headers show ALL req-uuid disabled save-as"},{"location":"es/codeblocks/#url","title":"url","text":"<p>Es la \u00fanica bandera obligatoria. Especifica la URL de la solicitud. Se pueden utilizar variables definidas en el <code>frontmatter</code>.</p> <pre><code>```req\n# un comentario\nurl: https://jsonplaceholder.typicode.com/users/{{this.id}}\n```\n</code></pre> <p>Donde <code>{{this.id}}</code> es una variable (<code>id</code>) definida en el frontmatter.</p>"},{"location":"es/codeblocks/#method","title":"method","text":"<p>Especifica el m\u00e9todo de solicitud. El valor predeterminado es <code>GET</code> y los valores disponibles son:</p> <ul> <li>GET</li> <li>POST</li> <li>PUT</li> <li>DELETE</li> </ul> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/posts\nmethod: post\n```\n</code></pre>"},{"location":"es/codeblocks/#body","title":"body","text":"<p>Especifica el cuerpo de la solicitud. El valor predeterminado es un objeto vac\u00edo. Los datos deben estar en formato JSON separando las claves y valores con dos puntos y espacio. Se pueden utilizar variables definidas en el <code>frontmatter</code>.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/posts\nmethod: post\nbody: {\"title\": {{this.title}}, \"body\": \"bar\", \"userId\": 1}\n```\n</code></pre> <p>Donde <code>{{this.title}}</code> es una variable (<code>title</code>) definida en el frontmatter.</p>"},{"location":"es/codeblocks/#headers","title":"headers","text":"<p>Especifica los encabezados de la solicitud. El valor predeterminado es un objeto vac\u00edo. Los datos deben estar en formato JSON separando las claves y valores con dos puntos y espacio. Se pueden utilizar variables definidas en el <code>frontmatter</code>.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/posts\nmethod: post\nheaders: {\"Content-type\": \"application/json; charset=UTF-8\"}\n```\n</code></pre>"},{"location":"es/codeblocks/#show","title":"show","text":"<p>Especifica los datos de respuesta que se van a mostrar. Ver ejemplos de JSONPath, o prueba la herramienta online de jsonpath-plus.</p> <pre><code>```req\nurl: https://api.chess.com/pub/player/hikaru/stats\nshow: $['chess_daily']['last']['rating']\n```\n</code></pre> <p>Se pueden mostrar m\u00faltiples resultados usando <code>[]</code>.</p> <pre><code>```req\nurl: https://api.chess.com/pub/player/hikaru/stats\nshow: $.chess_daily[last,best].rating\n```\n</code></pre> <p>Tambi\u00e9n es posible iterar sobre un arreglo. El siguiente ejemplo muestra la ciudad de todos los usuarios.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users\nshow: $..address.city\n```\n</code></pre> <p>Tambi\u00e9n es posible iterar sobre un n\u00famero especificado de elementos del arreglo.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users\nshow: $..[:3].address.city\n```\n</code></pre> <p>Tambi\u00e9n es posible iterar sobre un rango especificado de \u00edndices del arreglo.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users\nshow: $..[3,2,6].address.city\n```\n</code></pre> <p>Puedes acceder al \u00faltimo elemento usando <code>(@.length-1)</code> o simplemente <code>[-1:]</code>.</p> <pre><code>```req\nurl: https://api.modrinth.com/v2/project/distanthorizons\nshow: $.game_versions[(@.length-1)]\n```\n</code></pre> <p>Para acceder a multiples resultados podemos usar:</p> <pre><code>```req \nurl: http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&amp;user=rooyca&amp;api_key=API_KEY&amp;format=json&amp;limit=4\nshow: $..recenttracks.track[0:][streamable,name,artist]\n```\n</code></pre>"},{"location":"es/codeblocks/#req-uuid","title":"req-uuid","text":"<p>Especifica el ID con la que se almacenar\u00e1 la solicitud. Esto es \u00fatil cuando queremos almacenar la respuesta en <code>localStorage</code> y usarla en otros bloques o notas.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users/1\nshow: $.name\nreq-uuid: name\n```\n</code></pre> <p>Las respuestas almacenadas se pueden ver usando el <code>req-uuid</code> con la bandera <code>disabled</code> (que no activar\u00e1 una nueva solicitud).</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users/1\nreq-uuid: name\ndisabled\n```\n</code></pre> <p>Las respuestas tambi\u00e9n se pueden ver usando dataview.</p> <pre><code>```dataview\ndv.paragraph(localStorage.getItem(\"req-name\"))\n```\n</code></pre> <p>Es obligatorio usar <code>req-</code> antes de lo que sea que hayas definido en la bandera <code>req-uuid</code>.</p> <p>Para eliminar respuestas de localStorage, ejecuta:</p> <pre><code>```dataview\nlocalStorage.removeItem(\"req-name\")\n```\n</code></pre> <p>Para eliminar todas las respuestas, ve a configuraciones y haz clic sobre la respuesta que quieras eliminar.</p>"},{"location":"es/codeblocks/#disabled","title":"disabled","text":"<p>Deshabilita la solicitud. El codeblock no se ejecutar\u00e1.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users/1\nshow: $.name\nreq-uuid: name\ndisabled\n```\n</code></pre>"},{"location":"es/codeblocks/#save-as","title":"save-as","text":"<p>Especifica la ruta para guardar la respuesta. Guardar\u00e1 toda la respuesta. Se requiere una extensi\u00f3n de archivo. No crear\u00e1 directorios.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/posts/1\nsave-as: posts/1.json\n```\n</code></pre>"},{"location":"es/codeblocks/#auto-update","title":"auto-update","text":"<p>El codeblock se actualizar\u00e1 de manera automatica cada que sea posible. Esto solo es necesario cuando la bandera <code>req-uuid</code> est\u00e1 precente, porque el comportamiento predeterminado del codeblock es ejecutarse cada vez que se carga la nota.</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/posts/1\nreq-uuid: firstPost\nauto-update\nsave-as: posts/1.json\n```\n</code></pre>"},{"location":"es/usecase/","title":"Ejemplos de uso","text":"<p>A collection of use cases for this plugin. If you have a one, please share it with us. Una colecci\u00f3n ejemplos de uso para este plugin. Si tienes uno, por favor comp\u00e1rtelo con nosotros.</p>"},{"location":"es/usecase/#ver-el-precio-de-bitcoin-o-cualquier-criptomoneda","title":"Ver el precio de BITCOIN (o cualquier criptomoneda)","text":"<pre><code>```req \nurl: https://api.coincap.io/v2/rates/bitcoin\nshow: $.data.rateUsd\n```\n</code></pre> <p>64992.8972508856324769</p>"},{"location":"es/usecase/#obtener-el-clima","title":"Obtener el clima","text":"<pre><code>```req\nurl: https://api.openweathermap.org/data/2.5/weather?q=&lt;CITY&gt;&amp;appid=YOUR_API_KEY\nshow: $.main.temp\n```\n</code></pre>"},{"location":"es/usecase/#buscar-peliculas","title":"Buscar peliculas","text":"<pre><code>```req\nurl: https://api.themoviedb.org/3/search/movie?query={{this.title}}&amp;api_key=YOUR_API_KEY\nshow: $.results[0:].title\n```\n</code></pre> <p>Nota el uso de <code>{{this.title}}</code>. Esta es una caracter\u00edstica que te permite pasar propiedades del front-matter.</p>"},{"location":"es/usecase/#obtener-mas-de-un-resultado","title":"Obtener m\u00e1s de un resultado","text":"<pre><code>```req\nurl: https://mapi.mobilelegends.com/hero/detail?id={{this.file.name}}\nshow: $.data[cover_picture,name,type]\n```\n</code></pre>"},{"location":"es/usecase/#obtener-tareas-de-todoist","title":"Obtener Tareas de todoist","text":"<pre><code>```req\nurl: https://api.todoist.com/rest/v2/tasks\nheaders: {\"Authorization\": \"Bearer YOUR_TOKEN\"}\nshow: $..content\nreq-uuid: todos\n```\n</code></pre> <p>Esto guardar\u00e1 la respuesta en localStorage bajo la clave <code>req-todos</code></p>"},{"location":"es/usecase/#tu-caso-de-uso","title":"Tu caso de uso","text":"<p>Si deseas compartir tu caso de uso, por favor si\u00e9ntete libre de abrir una PR o un Issue</p>"},{"location":"zh/","title":"\ud83d\udd0e \u6982\u8ff0","text":"<p>APIRequest (APIR) \u662f\u7b14\u8bb0\u5e94\u7528 Obsidian \u7684\u4e00\u4e2a\u63d2\u4ef6\uff0c\u5b83\u5141\u8bb8\u60a8\u5411 api \u6216\u5176\u4ed6\u6765\u6e90\u53d1\u51fa\u8bf7\u6c42\u5e76\u5728\u7b14\u8bb0\u4e2d\u663e\u793a\u54cd\u5e94\u3002</p>"},{"location":"zh/#_2","title":"\ud83d\udd25 \u529f\u80fd","text":"<ul> <li>\u4f7f\u7528\u5404\u79cd\u65b9\u6cd5\u6267\u884c HTTP \u8bf7\u6c42\uff0c\u4f8b\u5982 <code>GET</code>\u3001<code>POST</code>\u3001<code>PUT</code> \u548c <code>DELETE</code>\u3002</li> <li>\u5728\u4ee3\u7801\u5757\u5185\u5229\u7528\u524d\u8a00\u4e2d\u7684\u53d8\u91cf\u3002</li> <li>\u5c06\u54cd\u5e94\u4fdd\u5b58\u5728 <code>localStorage</code> \u4e2d\uff0c\u4ee5\u65b9\u4fbf\u8bbf\u95ee\u548c\u91cd\u7528\u3002</li> <li>\u6839\u636e\u9700\u8981\u7981\u7528\u4ee3\u7801\u5757\u4ee5\u4f18\u5316\u6027\u80fd\u3002</li> <li>\u4ee5\u6307\u5b9a\u7684\u95f4\u9694\u591a\u6b21\u91cd\u590d\u8bf7\u6c42\uff0c\u4fc3\u8fdb\u81ea\u52a8\u5316\u4efb\u52a1\u6216\u8fde\u7eed\u6570\u636e\u68c0\u7d22\u800c\u65e0\u9700\u4eba\u5de5\u5e72\u9884\u3002</li> </ul>"},{"location":"zh/#_3","title":"\u26a1 \u5982\u4f55\u4f7f\u7528","text":""},{"location":"zh/#_4","title":"\ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb \u4ee3\u7801\u5757","text":"<p>\u8981\u4f7f\u7528\u5b83\uff0c\u8bf7\u521b\u5efa\u4e00\u4e2a\u4ee3\u7801\u5757\uff0c\u5e76\u5c06\u8bed\u8a00\u8bbe\u7f6e\u4e3a <code>req</code>\u3002\u5728\u4ee3\u7801\u5757\u5185\uff0c\u60a8\u53ef\u4ee5\u6307\u5b9a<code>url</code>\u3001<code>method</code>\u3001<code>body</code>\u3001<code>headers</code> \u7b49\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u53ef\u7528\u6807\u5fd7\u3002</p> <pre><code>```req\nurl: https://my-json-server.typicode.com/typicode/demo/comments\nmethod: post\nbody: {\"id\":1}\nheaders: {\"Accept\": \"application/json\"}\nshow: $.id\nreq-uuid: id-persona\ndisabled\n```\n</code></pre>"},{"location":"zh/codeblocks/","title":"\ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb \u4ee3\u7801\u5757","text":"<p><code>codeblock</code> \u662f\u4e00\u4e2a\u591a\u529f\u80fd\u5757\uff0c\u53ef\u7528\u4e8e\u7528\u4e0d\u540c\u8bed\u8a00\u7f16\u5199\u4ee3\u7801\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u6765\u53d1\u51fa\u8bf7\u6c42\u3002</p>"},{"location":"zh/codeblocks/#flag","title":"\ud83c\udff3\ufe0f Flag","text":"<p>Flag\u662f\u6307\u5b9a\u8bf7\u6c42\u53c2\u6570\u4ee5\u53ca\u6211\u4eec\u60f3\u8981\u7684\u54cd\u5e94\u683c\u5f0f\u7684\u65b9\u5f0f\u3002</p> \u6807\u5fd7 \u9ed8\u8ba4 url method GET body headers show ALL req-id req-general disabled save-as"},{"location":"zh/codeblocks/#url","title":"url","text":"<p>\u662f\u552f\u4e00\u7684\u5fc5\u9700\u6807\u5fd7\u3002\u5b83\u6307\u5b9a\u8bf7\u6c42\u7684\u7aef\u70b9\u3002\u53ef\u4ee5\u4f7f\u7528 <code>frontmatter</code> \u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u3002</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users/{{this.id}}\n```\n</code></pre> <p>\u5176\u4e2d<code>{{this.id}}</code>\u662ffrontmatter\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\uff08<code>id</code>\uff09\u3002</p>"},{"location":"zh/codeblocks/#method","title":"method","text":"<p>\u6307\u5b9a\u8bf7\u6c42\u65b9\u6cd5\u3002\u9ed8\u8ba4\u503c\u4e3a <code>GET</code>\uff0c\u53ef\u7528\u503c\u4e3a\uff1a</p> <ul> <li>GET</li> <li>POST</li> <li>PUT</li> <li>DELETE</li> </ul> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/posts\nmethod: post\n```\n</code></pre>"},{"location":"zh/codeblocks/#body","title":"body","text":"<p>\u6307\u5b9a\u8bf7\u6c42\u7684\u6b63\u6587\u3002\u9ed8\u8ba4\u503c\u4e3a\u7a7a\u5bf9\u8c61\u3002\u6570\u636e\u5e94\u4e3a JSON \u683c\u5f0f\uff0c\u53cc\u5f15\u53f7\u7528\u5192\u53f7\u548c\u7a7a\u683c\u5206\u9694\u952e\u548c\u503c\u3002\u53ef\u4ee5\u4f7f\u7528 <code>frontmatter</code> \u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u3002</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/posts\nmethod: post\nbody: {\"title\": {{this.title}}, \"body\": \"bar\", \"userId\": 1}\n```\n</code></pre> <p>\u5176\u4e2d <code>{{this.title}}</code> \u662f frontmatter \u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\uff08<code>title</code>\uff09\u3002</p>"},{"location":"zh/codeblocks/#headers","title":"headers","text":"<p>\u6307\u5b9a\u8bf7\u6c42\u7684\u6807\u5934\u3002\u9ed8\u8ba4\u503c\u4e3a\u7a7a\u5bf9\u8c61\u3002\u6570\u636e\u5e94\u4e3a JSON \u683c\u5f0f\uff0c\u53cc\u5f15\u53f7\u5c06\u952e\u548c\u503c\u7528\u5192\u53f7\u548c\u7a7a\u683c\u5206\u9694\u3002\u53ef\u4ee5\u4f7f\u7528 <code>frontmatter</code> \u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u3002</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/posts\nmethod: post\nheaders: {\"Content-type\": \"application/json; charset=UTF-8\"}\n```\n</code></pre>"},{"location":"zh/codeblocks/#show","title":"show","text":"<p>\u6307\u5b9a\u8981\u663e\u793a\u7684\u54cd\u5e94\u6570\u636e\u3002\u4f7f\u7528\u53f3\u7bad\u5934 <code>-&gt;</code> \u8bbf\u95ee\u5d4c\u5957\u5bf9\u8c61\u3002\u9ed8\u8ba4\u503c\u4e3a <code>ALL</code>\u3002</p> <pre><code>```req\nurl: https://api.chess.com/pub/player/hikaru/stats\nshow: chess_daily -&gt; last -&gt; rating\n```\n</code></pre> <p>\u53ef\u4ee5\u901a\u8fc7\u7528\u9017\u53f7\u5206\u9694\u6765\u663e\u793a\u591a\u4e2a\u8f93\u51fa\u3002</p> <pre><code>```req\nurl: https://api.chess.com/pub/player/hikaru/stats\nshow: chess_daily -&gt; last -&gt; rating, chess_daily -&gt; best -&gt; rating\nformat: &lt;p&gt;Last game: {}&lt;/p&gt; &lt;strong&gt;Best game: {}&lt;/strong&gt;\nrender\n```\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>{..}</code> \u5faa\u73af\u904d\u5386\u6570\u7ec4\u3002\u4ee5\u4e0b\u793a\u4f8b\u4ece\u6240\u6709\u7528\u6237\u4e2d\u68c0\u7d22\u57ce\u5e02 (city)\u3002</p> <pre><code>```req\nurl: https://jsonplaceholder.typicode.com/users\nshow: {..} -&gt; address -&gt; city\n```\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>{n..n}</code> \u5faa\u73af\u904d\u5386\u6570\u7ec4\u4e2d\u6307\u5b9a\u6570\u91cf\u7684\u5143\u7d20\u3002</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users\nshow: {0..2} -&gt; address -&gt; city\n```\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>{n-n-n}</code> \u5faa\u73af\u904d\u5386\u6570\u7ec4\u7684\u6307\u5b9a\u8303\u56f4\u7684\u7d22\u5f15\u3002</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users\nshow: {0-2-1} -&gt; address -&gt; city\n```\n</code></pre> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>{-1}</code> \u8bbf\u95ee\u6700\u540e\u4e00\u4e2a\u5143\u7d20...</p> <pre><code>```req\nurl:https://api.modrinth.com/v2/project/distanthorizons\nshow: game_versions -&gt; {-1}\n```\n</code></pre> <p>...\u6216\u8005\u4f7f\u7528 <code>{len}</code> \u83b7\u53d6\u6570\u7ec4\u7684\u957f\u5ea6\u3002</p> <pre><code>```req\nurl:https://api.modrinth.com/v2/project/distanthorizons\nshow: game_versions -&gt; {len}\n```\n</code></pre> <p>\u4f7f\u7528 <code>{..}</code> \u65f6\uff0c\u82e5\u8981\u540c\u65f6\u8bbf\u95ee\u591a\u4e2a\u5143\u7d20\uff0c\u8bf7\u4f7f\u7528 <code>&amp;</code> \u5206\u9694\u952e\uff0c\u5e76\u4f7f\u7528 <code>.</code> \u8bbf\u95ee\u503c\u3002</p> <pre><code>```req \nurl: http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&amp;user=rooyca&amp;api_key=API_KEY&amp;format=json&amp;limit=4\nshow: recenttracks -&gt; track -&gt; {..} -&gt; name &amp; artist.#text &amp; streamable\nmaketable: name, artist, stream\n```\n</code></pre>"},{"location":"zh/codeblocks/#req-id","title":"req-id","text":"<p>\u6307\u5b9a\u8bf7\u6c42\u7684 ID\u3002\u9ed8\u8ba4\u503c\u4e3a <code>req-general</code>\u3002\u5f53\u6211\u4eec\u60f3\u8981\u5c06\u54cd\u5e94\u5b58\u50a8\u5728 <code>localStorage</code> \u4e2d\u5e76\u5728\u5176\u4ed6\u5757\u6216\u6ce8\u91ca\u4e2d\u4f7f\u7528\u5b83\u65f6\uff0c\u8fd9\u5f88\u6709\u7528\u3002</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users/1\nshow: name\nreq-id: name\n```\n</code></pre> <p>\u53ef\u4ee5\u4f7f\u7528\u5e26\u6709 <code>disabled</code> \u6807\u5fd7\u7684 <code>req-id</code> \u8bbf\u95ee\u5b58\u50a8\u7684\u54cd\u5e94\uff08\u4e0d\u4f1a\u89e6\u53d1\u65b0\u8bf7\u6c42\uff09\u3002</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users/1\nreq-id: name\ndisabled\n```\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528 dataview \u8bbf\u95ee\u54cd\u5e94\u3002</p> <pre><code>```dataview\ndv.paragraph(localStorage.getItem(\"req-name\"))\n```\n</code></pre> <p>\u5728<code>req-id</code>\u6807\u5fd7\u4e2d\u5b9a\u4e49\u7684\u4efb\u4f55\u5185\u5bb9\u4e4b\u524d\uff0c\u5fc5\u987b\u4f7f\u7528<code>req-</code></p> <p>\u8981\u4ece localStorage \u4e2d\u5220\u9664\u54cd\u5e94\uff0c\u8bf7\u8fd0\u884c\uff1a</p> <pre><code>```dataview\nlocalStorage.removeItem(\"req-name\")\n```\n</code></pre> <p>\u8981\u5220\u9664\u6240\u6709\u54cd\u5e94\uff0c\u8bf7\u8f6c\u5230\u8bbe\u7f6e\u5e76\u5355\u51fb <code>Clear ID's</code> (\u6e05\u9664ID) \u6309\u94ae\u3002</p>"},{"location":"zh/codeblocks/#disabled","title":"disabled","text":"<p>\u7981\u7528\u8bf7\u6c42\u3002\u5982\u679c\u6307\u5b9a\u4e86 <code>req-id</code>\uff0cAPIR \u5c06\u5728<code>localStorage</code>\u4e2d\u68c0\u67e5\u54cd\u5e94\u3002\u5982\u679c\u672a\u627e\u5230\uff0c\u5b83\u5c06\u53d1\u51fa\u65b0\u8bf7\u6c42\u5e76\u5b58\u50a8\u5b83\u3002\u4e4b\u540e\uff0cAPIR \u5c06\u4f7f\u7528\u5b58\u50a8\u7684\u54cd\u5e94\u3002</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/users/1\nshow: name\nreq-id: name\ndisabled\n```\n</code></pre>"},{"location":"zh/codeblocks/#save-as","title":"save-as","text":"<p>\u6307\u5b9a\u4fdd\u5b58\u54cd\u5e94\u7684\u8def\u5f84\u3002\u5b83\u5c06\u4fdd\u5b58\u6574\u4e2a\u54cd\u5e94\u3002\u9700\u8981\u6587\u4ef6\u6269\u5c55\u540d\u3002\u5b83\u4e0d\u4f1a\u521b\u5efa\u76ee\u5f55\u3002</p> <pre><code>```req \nurl: https://jsonplaceholder.typicode.com/posts/1\nsave-as: posts/1.json\n```\n</code></pre>"},{"location":"zh/usecase/","title":"\u7528\u4f8b","text":"<p>\u6b64\u63d2\u4ef6\u7684\u7528\u4f8b\u96c6\u5408\u3002 \u5982\u679c\u60a8\u6709\uff0c\u8bf7\u4e0e\u6211\u4eec\u5206\u4eab\u3002</p>"},{"location":"zh/usecase/#_2","title":"\u68c0\u67e5\u6bd4\u7279\u5e01\uff08\u6216\u4efb\u4f55\u52a0\u5bc6\u8d27\u5e01\uff09\u4ef7\u683c","text":"<pre><code>```req \nurl: https://api.coincap.io/v2/rates/bitcoin\nshow: $.data.rateUsd\n```\n</code></pre> <p>64992.8972508856324769</p>"},{"location":"zh/usecase/#_3","title":"\u83b7\u53d6\u5929\u6c14","text":"<pre><code>```req\nurl: https://api.openweathermap.org/data/2.5/weather?q=&lt;CITY&gt;&amp;appid=YOUR_API_KEY\nshow: $.main.temp\n```\n</code></pre>"},{"location":"zh/usecase/#_4","title":"\u641c\u7d22\u7535\u5f71","text":"<pre><code>```req\nurl: https://api.themoviedb.org/3/search/movie?query={{this.title}}&amp;api_key=YOUR_API_KEY\nshow: $.results[0:].title\n```\n</code></pre> <p>\u8bf7\u6ce8\u610f\u4f7f\u7528 <code>{{this.title}}</code>\u3002\u6b64\u529f\u80fd\u5141\u8bb8\u60a8\u4f20\u9012\u524d\u7f6e\u5c5e\u6027\u3002</p>"},{"location":"zh/usecase/#_5","title":"\u83b7\u5f97\u591a\u4e2a\u7ed3\u679c","text":"<pre><code>```req\nurl: https://mapi.mobilelegends.com/hero/detail?id={{this.file.name}}\nshow: $.data[cover_picture,name,type]\n```\n</code></pre>"},{"location":"zh/usecase/#todoist-todos","title":"\u4ece todoist \u83b7\u53d6 TODOS","text":"<pre><code>```req\nurl: https://api.todoist.com/rest/v2/tasks\nheaders: {\"Authorization\": \"Bearer YOUR_TOKEN\"}\nshow: $..content\nformat: - [ ] {}\nreq-id: todos\n```\n</code></pre> <p>\u8fd9\u5c06\u628a\u54cd\u5e94\u4fdd\u5b58\u5728 localStorage \u4e2d\u7684\u952e <code>req-todos</code> \u4e0b</p>"},{"location":"zh/usecase/#_6","title":"\u60a8\u7684\u7528\u4f8b","text":"<p>\u5982\u679c\u60a8\u60f3\u5206\u4eab\u60a8\u7684\u7528\u4f8b\uff0c\u8bf7\u968f\u65f6\u6253\u5f00 PR \u6216 Issue\u3002</p>"}]}